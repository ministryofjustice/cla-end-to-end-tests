version: 2.1
orbs:
  aws-cli: circleci/aws-cli@4.0.0 # use v4 of this orb
  aws-ecr: circleci/aws-ecr@8.2.1 # this orb doesn't support OIDC v2, so we use aws-cli to authenticate
  orb-tools: circleci/orb-tools@10.1.0

jobs:
  behave:
    docker:
      - image: cimg/python:3.10.1
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Run linter and formatting checks
          command: |
            pip install pre-commit==2.17.0
            pre-commit run --all-files
      - run:
          name: Install compatible docker-compose
          command: pip install docker-compose==1.27.4
      - run:
          name: Authenticate with awscli
          command: |
            pip install awscli
            login="$(aws ecr get-login --region eu-west-2 --no-include-email)"
            ${login}
      - run:
          name: Build / pull Docker images
          command: |
            cd behave
            docker-compose pull
            docker-compose build
      - run:
          name: Check services are up
          command: |
            cd behave
            docker-compose run start_applications
            docker-compose exec clabackend bin/create_db.sh
      - run:
          name: Run behave tests
          command: |
            cd behave
            docker-compose run --name cla-end-to-end cla-end-to-end
      - run:
          name: Copy artifacts
          command: |
            echo "Manually copying files because circleci docker executor does not support volumes"
            echo "https://support.circleci.com/hc/en-us/articles/360007324514-How-can-I-mount-volumes-to-docker-containers-"
            docker cp cla-end-to-end:/data behave/data
          when: always
      - store_artifacts:
          path: behave/data
          destination: data

  build:
    executor: aws-ecr/default # use the aws-ecr/default executor to start the docker daemon
    steps:
      # Checkout your repository
      - checkout
      # Authenticate to AWS using OIDC v2 with the AWS CLI
      - aws-cli/setup:
          role_arn: $ECR_ROLE_TO_ASSUME # this will use the env var
          region: $ECR_REGION # this will use the env var
      # Authenticate to the ECR repository using the standard command
      - run: |
          aws ecr get-login-password --region $ECR_REGION | docker login --username AWS --password-stdin ${AWS_ECR_REGISTRY_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com
      # Build and push your Docker image
      - run:
          name: Create target tag for main application image
          command: |
            source .circleci/define_build_environment_variables
            echo "Created tags $TARGET_TAGS"
            echo "export BUILD_TAGS=$TARGET_TAGS" >> $BASH_ENV
      - aws-ecr/build-image:
          push-image: true
          tag: $BUILD_TAGS
          region: $ECR_REGION # this will use the env var
          repo: $ECR_REPOSITORY # this will use the env var
workflows:
  build:
    jobs:
      - build
      - orb-tools/publish-dev:
          name: publish_dev_orb
          attach-workspace: false
          checkout: true
          orb-name: ministryofjustice/cla-end-to-end-tests
          orb-path: orb.yml
          context:
            - laa-cla-orbs-token
      - orb-tools/increment:
          name: publish_production_orb
          segment: patch
          orb-ref: ministryofjustice/cla-end-to-end-tests
          orb-path: orb.yml
          requires:
            - publish_dev_orb
          context:
            - laa-cla-orbs-token
          filters:
            branches:
              only:
                - main
      - behave
